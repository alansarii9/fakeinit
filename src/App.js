// โ ุชุญุฏูุซ: ุฅุฎูุงุก ุงูุณุคุงู ุนู ุงููุถูู ูุนุฏู ุฅุธูุงุฑู ุนูู ุงูุดุงุดุฉ ุงููุจูุฑุฉ

import React, { useState, useEffect } from "react";
import { nanoid } from "nanoid";

const questions = [
  "ุงุฑูุน ูุฏู ุฅุฐุง ุชุญุจ ุงูุดุงู ุฃูุซุฑ ูู ุงููููุฉ",
  "ุฃุธูุฑ ุนุฏุฏ ุฃุตุงุจุน ููุซู ุนุฏุฏ ุฅุฎูุชู",
  "ุงุดูุฑ ุนูู ุดุฎุต ุชุธู ุฃูู ูุบุด ูู ุงูุฃูุนุงุจ",
  "ุงุฑูุน ูุฏู ุฅุฐุง ุฃููุช ุงูููู ูุทูุฑ",
  "ูู ูุฑุฉ ุชุณุงูุฑ ูู ุงูุณูุฉุ ุฃุธูุฑูุง ุจุฃุตุงุจุนู"
];

export default function App() {
  const [roomCode, setRoomCode] = useState("");
  const [name, setName] = useState("");
  const [stage, setStage] = useState("welcome");
  const [players, setPlayers] = useState([]);
  const [fakerId, setFakerId] = useState(null);
  const [question, setQuestion] = useState("");
  const [seconds, setSeconds] = useState(30);
  const [timerActive, setTimerActive] = useState(false);
  const [currentPlayerId, setCurrentPlayerId] = useState(null);

  const createRoom = () => {
    const code = Math.floor(1000 + Math.random() * 9000).toString();
    setRoomCode(code);
    setPlayers([]);
    setStage("host");
  };

  const joinRoom = () => {
    if (!name || !roomCode) return alert("ุฃุฏุฎู ุงูุงุณู ูุฑูุฒ ุงูุบุฑูุฉ");
    const newPlayer = { id: nanoid(), name };
    setPlayers(prev => [...prev, newPlayer]);
    setCurrentPlayerId(newPlayer.id);
    setStage("player");
  };

  const simulatePlayers = () => {
    const fakePlayers = ["ุฃุญูุฏ", "ุณุงุฑุฉ", "ููุฏ"].map(n => ({ id: nanoid(), name: n }));
    setPlayers(fakePlayers);
  };

  const startRound = () => {
    if (players.length < 3) return alert("ูุฌุจ ุฃู ูููู ููุงู 3 ูุงุนุจูู ุนูู ุงูุฃูู");
    const randomFaker = players[Math.floor(Math.random() * players.length)].id;
    const randomQuestion = questions[Math.floor(Math.random() * questions.length)];
    setFakerId(randomFaker);
    setQuestion(randomQuestion);
    setSeconds(30);
    setTimerActive(true);
  };

  useEffect(() => {
    if (!timerActive || seconds === 0) return;
    const interval = setInterval(() => {
      setSeconds(prev => {
        if (prev === 1) setTimerActive(false);
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(interval);
  }, [timerActive, seconds]);

  if (stage === "welcome") {
    return (
      <div style={{ textAlign: "center", padding: 40, direction: "rtl" }}>
        <h1>๐ญ ูุนุจุฉ ูู ูู ุงููููุ</h1>
        <button onClick={createRoom}>๐ฌ ุฅูุดุงุก ุบุฑูุฉ</button>
        <hr style={{ margin: 20 }} />
        <h3>๐ฎ ุงูุฏุฎูู ุฅูู ุบุฑูุฉ ููุฌูุฏุฉ</h3>
        <input placeholder="ุงุณูู" value={name} onChange={e => setName(e.target.value)} />
        <input placeholder="ุฑูุฒ ุงูุบุฑูุฉ" value={roomCode} onChange={e => setRoomCode(e.target.value)} />
        <button onClick={joinRoom}>๐ช ุฏุฎูู</button>
      </div>
    );
  }

  if (stage === "host") {
    return (
      <div style={{ padding: 30, direction: "rtl", fontFamily: "Arial" }}>
        <h2>๐บ ุงูุบุฑูุฉ ุฌุงูุฒุฉ</h2>
        <p>ุฑูุฒ ุงูุบุฑูุฉ: <strong>{roomCode}</strong></p>
        <h3>๐ฅ ุงููุงุนุจูู:</h3>
        <ul>
          {players.map(p => <li key={p.id}>{p.name}</li>)}
        </ul>
        {!question && (
          <>
            <button onClick={startRound}>๐ ุจุฏุก ุงูุฌููุฉ</button>
            <button onClick={simulatePlayers} style={{ marginRight: 10 }}>๐งช ุฃุถู ูุงุนุจูู ูููููู</button>
          </>
        )}
        {question && (
          <div>
            <h2>โณ ุงูููุช ุงููุชุจูู: {seconds} ุซุงููุฉ</h2>
            {!timerActive && <p>โ ููุง ุฌุงูุจูุง ุงูุขู ุจุงูุฅุดุงุฑุฉ!</p>}
          </div>
        )}
      </div>
    );
  }

  if (stage === "player") {
    const isFaker = fakerId && currentPlayerId === fakerId;
    return (
      <div style={{ padding: 30, textAlign: "center", direction: "rtl" }}>
        <h2>โ ุงูุถููุช ุฅูู ุงูุบุฑูุฉ!</h2>
        <p>ุฑูุฒ ุงูุบุฑูุฉ: {roomCode}</p>
        {question && (
          isFaker ? (
            <h3>๐คซ ุฃูุช ุงูููู! ูุง ุชุนุฑู ุงูุณุคุงู</h3>
          ) : (
            <h3>โ ุงูุณุคุงู: {question}</h3>
          )
        )}
        {timerActive && <p>โณ ุงูููุช: {seconds} ุซุงููุฉ</p>}
        {!timerActive && question && <p>โ ุฌุงูุจ ุงูุขู ุจุงูุฅุดุงุฑุฉ!</p>}
      </div>
    );
  }

  return null;
}
